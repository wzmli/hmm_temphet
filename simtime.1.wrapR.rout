
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # This file was generated automatically by wrapR.pl
> # You probably don't want to edit it
> 
> rtargetname <- "simtime.1"
> pdfname <- ".simtime.1.Rout.pdf"
> csvname <- "simtime.1.Rout.csv"
> rdsname <- "simtime.1.Rds"
> pdf(pdfname)
> # End RR preface
> 
> # Generated using wrapR file simtime.1.wrapR.r
> source('mikesim.R', echo=TRUE)

> simhmm <- function(object, nsim = 1, seed = NULL, 
+     ...) {
+     if (!is.null(seed)) 
+         set.seed(seed)
+     ntim <- ntimes(object)
+   .... [TRUNCATED] 
> source('simfunctions.R', echo=TRUE)

> simhomo <- function(state, cat, fit) {
+     model <- depmix(LogDist ~ 1, data = cat, nstate = state, 
+         transition = ~1, family = gaussian( .... [TRUNCATED] 

> simhourly <- function(state, cat, fit) {
+     model <- depmix(LogDist ~ 1, data = cat, nstate = state, 
+         transition = ~factor(Time), famil .... [TRUNCATED] 

> simsin <- function(state, cat, fit) {
+     model <- depmix(LogDist ~ 1, data = cat, nstate = state, 
+         transition = ~cos((2 * pi * Time)/24 .... [TRUNCATED] 

> simquad <- function(state, cat, fit) {
+     model <- depmix(LogDist ~ 1, data = cat, nstate = state, 
+         transition = ~I(Time/24) + I((Time/ .... [TRUNCATED] 

> simblock <- function(state, cat, fit) {
+     model <- depmix(LogDist ~ 1, data = cat, nstate = state, 
+         transition = ~factor(Block), famil .... [TRUNCATED] 

> simmix <- function(state, cat, fit) {
+     model <- mix(LogDist ~ 1, data = cat, prior = ~1, nstate = state, 
+         family = gaussian(), initda .... [TRUNCATED] 

> simmixsin <- function(state, cat, fit) {
+     model <- mix(LogDist ~ 1, data = cat, prior = ~cos((2 * pi * 
+         Time)/24) + sin((2 * pi * Tim .... [TRUNCATED] 
> source('simtimetest.R', echo=TRUE)

> library(depmixS4)

> library(plyr)

> t <- rep(0:23, 500)

> y <- rep(1, 12000)

> tempdat <- data.frame(y = y, t = t)

> system.time(mod <- depmix(y ~ 1, data = tempdat, transition = ~cos((2 * 
+     pi * t)/24) + sin((2 * pi * t)/24), nstate = 2, family = gaussian()))
   user  system elapsed 
  0.372   0.000   0.384 

> getpars(mod)
                     pr1                      pr2          (Intercept).St1 
                     0.5                      0.5                      0.0 
         (Intercept).St2 cos((2 * pi * t)/24).St1 cos((2 * pi * t)/24).St2 
                     0.0                      0.0                      0.0 
sin((2 * pi * t)/24).St1 sin((2 * pi * t)/24).St2          (Intercept).St1 
                     0.0                      0.0                      0.0 
         (Intercept).St2 cos((2 * pi * t)/24).St1 cos((2 * pi * t)/24).St2 
                     0.0                      0.0                      0.0 
sin((2 * pi * t)/24).St1 sin((2 * pi * t)/24).St2              (Intercept) 
                     0.0                      0.0                      0.0 
                      sd              (Intercept)                       sd 
                     1.0                      0.0                      1.0 

> seed = unlist(strsplit(rtargetname, "[.]"))[2]

> set.seed(seed)

> randpars <- sample(-3:3, length(getpars(mod)) - 6, 
+     replace = TRUE)

> newmod <- setpars(mod, c(0.5, 0.5, randpars, 0, 1, 
+     2, 1))

> newmod
Initial state probabilties model 
pr1 pr2 
0.5 0.5 

Transition model for state (component) 1 
Model of type multinomial (mlogit), formula: ~cos((2 * pi * t)/24) + sin((2 * pi * t)/24)
Coefficients: 
                     St1 St2
(Intercept)           -2  -1
cos((2 * pi * t)/24)   1   3
sin((2 * pi * t)/24)  -2   3
Probalities at zero values of the covariates.
1.987223 0.7310586 

Transition model for state (component) 2 
Model of type multinomial (mlogit), formula: ~cos((2 * pi * t)/24) + sin((2 * pi * t)/24)
Coefficients: 
                     St1 St2
(Intercept)            3   1
cos((2 * pi * t)/24)   1  -3
sin((2 * pi * t)/24)  -2  -2
Probalities at zero values of the covariates.
0.0438523 0.1192029 


Response parameters 
Resp 1 : gaussian 
    Re1.(Intercept) Re1.sd
St1               0      1
St2               2      1

> sim <- simhmm(newmod)

> error <- rnorm(12000, 0, 5)

> oldsl <- sim@response[[1]][[1]]@y

> newsl <- log10(abs(10^oldsl + error))

> hist(oldsl)

> hist(newsl)

> df <- data.frame(obs = newsl, states = sim@states, 
+     time = t)

> system.time(hmm2 <- depmix(obs ~ 1, data = df, transition = ~1, 
+     nstate = 2, family = gaussian()))
   user  system elapsed 
   0.02    0.00    0.02 

> system.time(hmm2s <- fit(hmm2, verbose = FALSE))
Timing stopped at: 2.168 0 2.172 
